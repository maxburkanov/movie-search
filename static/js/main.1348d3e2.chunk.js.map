{"version":3,"sources":["components/modal.jsx","components/Movie.jsx","components/MainContent.jsx","components/pagination.jsx","components/SearchBar.jsx","App.js","serviceWorker.js","index.js"],"names":["modal","width","props","data","console","log","className","title","rated","Movie","openMovie","setState","imdbID","fetchId","a","state","movie","id","url","fetch","resolve","json","this","length","onClick","React","Component","MainContent","Search","map","i","idx","key","src","Poster","Title","Year","Type","useStyles","makeStyles","theme","root","marginTop","spacing","page","saveCurrentPage","whatPage","paging","totalResults","Math","ceil","classes","useState","setPage","Pagination","count","onChange","event","value","search","setSearch","saveToState","currentPage","searchMovies","e","preventDefault","onSubmit","type","target","placeholder","App","sec","searchedWord","handlePage","SearchBar","selectMovie","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1348d3e2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst modal = {\r\n  width: '500px'\r\n}\r\n\r\nexport default (props) => {\r\n  const {data} = props;\r\n  console.log('no way', data)\r\n  \r\n  return (\r\n      <div className={modal}>\r\n        <div>{data.title}</div>\r\n        <div>{data.rated}</div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n\r\n      </div>\r\n  ) \r\n}","import React from 'react';\r\nimport \"../App.css\";\r\n\r\nimport Modal from \"./modal\";\r\n\r\nexport default class Movie extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      imdbID: '',\r\n      movie: [],\r\n    };\r\n  }\r\n\r\n\r\n  openMovie = () => {\r\n    this.setState({imdbID: this.props}, () =>{\r\n      this.fetchId()\r\n    })\r\n  }\r\n\r\n  fetchId = async () => {\r\n    const {imdbID, movie} = this.state;\r\n    console.log('imdbID  asdasd',imdbID.id)  \r\n    const url = `https://www.omdbapi.com/?i=${imdbID.id}&plot=full&apikey=cb289192`\r\n  \r\n    const resolve = await fetch(url);\r\n    const data = await resolve.json();\r\n\r\n    this.setState({ movie: data })\r\n    console.log('movie', movie)\r\n  }\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const {movie} = this.state\r\n    console.log('asdasdasdasda')\r\n    if (this.state.imdbID.length === 0) {\r\n      return (\r\n        <>\r\n        <div onClick={this.openMovie} className=\"open\">>  </div>\r\n        <Modal data={this.state.movie} />\r\n        <div>asdasdasdasd</div>\r\n        </>\r\n      )\r\n    }\r\n    // else {\r\n    //   return (\r\n    //   ) \r\n    // }\r\n }\r\n}","import React from 'react';\r\n// import {BrowserRouter as Router, Link, Route} from 'react-router-dom';\r\n\r\nimport \"../App.css\"\r\nimport Movie from './Movie';\r\n\r\n// const handlePage = async (page) => {\r\n//   const {whatPage, searchedWord} = this.state;\r\n//   const movieId = `https://www.omdbapi.com/?i=${tt0371746}&plot=full&apikey=cb289192`\r\n//   // const url =  `https://www.omdbapi.com/?s=${searchedWord}&page=${whatPage}&apikey=cb289192`;\r\n\r\n//   const resolve = await fetch(url);\r\n//   const data = await resolve.json();\r\n// }\r\n\r\n function MainContent (props) {\r\n  const {Search} = props.data;\r\n  if (props.data.length !== 0) {\r\n    return ( \r\n      <div className=\"main-poster\">\r\n        {\r\n          Search.map((i, idx)=>{\r\n            return (\r\n              <div key={idx } className=\"movie\" >\r\n                  <img src={i.Poster} />\r\n                <div>Title: {i.Title}</div>\r\n                <div>Year: {i.Year}</div>\r\n                <div>Type: {i.Type}</div>\r\n                <Movie id={i.imdbID} />\r\n                {}\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div>Search for movies</div>\r\n    )  \r\n  }\r\n          \r\n}\r\nexport default MainContent;","import { getDefaultNormalizer } from \"@testing-library/react\";\r\nimport React, {useState} from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\nimport \"../App.css\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\n// .data.totalResults\r\nexport default (props) => {\r\n  const {data, whatPage} = props.page;\r\n  const {saveCurrentPage} = props;\r\n  console.log('this is props from pagination', props)\r\n\r\n\r\n  const paging = data.totalResults && Math.ceil(data.totalResults/10)\r\n  const classes = useStyles();\r\n\r\n  const [page, setPage] = React.useState(1);\r\n\r\n  const handleChange = (event, value) => {\r\n    setPage(value);\r\n    saveCurrentPage(value)\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Pagination count={paging} page={page} onChange={handleChange} />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport \"../App.css\";\r\n\r\nimport Paging from './pagination';\r\n\r\n\r\nexport default (props)=>{\r\n\r\n  const [search, setSearch] = useState('');\r\n  const {saveToState, currentPage, saveCurrentPage, page} = props;\r\n\r\n  const searchMovies = async (e) => {\r\n    e.preventDefault()\r\n    // const page = currentPage;\r\n    const url =  `https://www.omdbapi.com/?s=${search}&page=${currentPage}&apikey=cb289192`;\r\n\r\n    const resolve = await fetch(url);\r\n    const data = await resolve.json();\r\n    \r\n    saveToState(data, search)\r\n  }\r\n\r\n  \r\n  return (\r\n      <form onSubmit={searchMovies} className=\"navBar\">\r\n        <div className='inner-search'>\r\n          <input type=\"text\" value={search} onChange={(e)=>{\r\n            setSearch(e.target.value)\r\n          }} className=\"nav-input\" placeholder=\"Search for movies...\"/>\r\n          <button type=\"submit\" className=\"nav-button\">Search</button>\r\n        </div>\r\n        <Paging className='form-paging' saveCurrentPage={saveCurrentPage} page={page}/>\r\n      </form>\r\n  )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport MainContent from './components/MainContent';\n\nimport SearchBar from './components/SearchBar';\nimport Paging from './components/pagination';\n\n// const movieId = 'https://www.omdbapi.com/?i=tt0371746&plot=full&apikey=cb289192'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      whatPage: 1,\n      searchedWord: '',\n    }\n  }\n\n  saveToState = (props, sec) =>{\n    this.setState({ data: props })\n    this.setState({ searchedWord: sec })\n  }\n  saveCurrentPage = (page)=>{\n    this.setState({whatPage: page}, ()=>{\n      this.handlePage() \n    })\n  }\n\n  handlePage = async (page) => {\n    const {whatPage, searchedWord} = this.state;\n    console.log('whatPage',whatPage)\n    const url =  `https://www.omdbapi.com/?s=${searchedWord}&page=${whatPage}&apikey=cb289192`;\n\n    const resolve = await fetch(url);\n    const data = await resolve.json();\n    \n    this.setState({ data: data })\n  }\n\n  // selectMovie = (props) => {\n\n  // }\n\n\n  render() {\n      return (\n        <div className=\"wrapper\">\n          <SearchBar\n            currentPage={this.state.whatPage}\n            saveToState={this.saveToState}\n            page={this.state}\n            saveCurrentPage={this.saveCurrentPage}\n          />\n          <MainContent data={this.state.data} selectMovie={this.selectMovie}/>\n        </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}